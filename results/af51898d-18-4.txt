---
Human_Prompt: You are a specialised circuit-diagram interpreter. Given the image of an electrical circuit diagram, identify which symbol classes from the list below appear in the image. IMPORTANT RULES: - Only list symbols you can clearly see and identify in the image - Do not guess or assume symbols are present - If you're uncertain about a symbol, do not include it - Look for distinctive visual features of each symbol type - A typical simple circuit might contain only 2-5 different symbol types. List only the classes you find, in a python list, and nothing else. Symbol classes: ["terminal", "gnd", "vss", "voltage.dc", "voltage.ac", "voltage.battery", "resistor", "resistor.adjustable", "resistor.photo", "capacitor.unpolarized", "capacitor.polarized", "capacitor.adjustable", "inductor", "inductor.ferrite", "inductor.coupled", "transformer", "diode", "diode.light_emitting", "diode.thyrector", "diode.zener", "diac", "triac", "thyristor", "varistor", "transistor.bjt", "transistor.fet", "transistor.photo", "operational_amplifier", "operational_amplifier.schmitt_trigger", "optocoupler", "integrated_circuit", "integrated_circuit.ne555", "integrated_circuit.voltage_regulator", "xor", "and", "or", "not", "nand", "nor", "probe", "probe.current", "probe.voltage", "switch", "relay", "socket", "fuse", "speaker", "motor", "lamp", "microphone", "antenna", "crystal", "mechanical", "magnetic", "optical", "block"]
===
Model_Response:  ["terminal", "resistor", "capacitor.polarized", "diode.light_emitting", "integrated_circuit.voltage_regulator", "switch", "fuse", "microphone", "antenna", "crystal", "mechanical", "magnetic", "optical", "block"]
---
Human_Prompt: You are a specialised circuit-diagram interpreter performing zero-shot inference. Given the image of an electrical circuit diagram, identify all symbols of class "terminal". For each symbol from that class, output one <points> tag and nothing else, in the exact format: <points x1="…" y1="…" x2="…" y2="…" alt="terminal">terminal</points> Use the coordinates of the bounding polygon of each symbol. Do not include any additional text or tags.Example: <points x1="20.8" y1="42.4" x2="21.0" y2="53.6" alt="terminal">terminal</points>
===
Model_Response:  <points x1="20.8" y1="42.4" x2="21.0" y2="53.6" x3="29.5" y3="42.4" x4="30.0" y4="53.6" x5="37.5" y5="42.4" x6="37.7" y6="53.6" x7="54.5" y7="42.4" x8="54.7" y8="31.7" x9="54.7" y9="53.6" x10="61.0" y10="42.4" x11="61.2" y11="31.7" x12="61.2" y12="53.6" x13="68.2" y13="42.4" x14="68.3" y14="31.7" x15="68.3" y15="53.6" x16="75.2" y16="42.4" x17="75.3" y17="31.7" x18="75.3" y18="53.6" x19="82.7" y19="42.4" x20="82.8" y20="31.7" x21="82.8" y21="53.6" x22="89.8" y22="42.4" x23="89.8" y23="53.6" x24="89.9" y24="31.7" alt="terminal">terminal</points>
---
Human_Prompt: You are a specialised circuit-diagram interpreter performing zero-shot inference. Given the image of an electrical circuit diagram, identify all symbols of class "resistor". For each symbol from that class, output one <points> tag and nothing else, in the exact format: <points x1="…" y1="…" x2="…" y2="…" alt="resistor">resistor</points> Use the coordinates of the bounding polygon of each symbol. Do not include any additional text or tags.Example: <points x1="20.8" y1="42.4" x2="21.0" y2="53.6" alt="resistor">resistor</points>
===
Model_Response:  <points x1="20.8" y1="42.4" x2="21.0" y2="53.6" x3="29.5" y3="42.4" x4="29.5" y4="53.6" x5="37.9" y5="42.4" x6="38.1" y6="53.6" alt="resistor">resistor</points>
---
Human_Prompt: You are a specialised circuit-diagram interpreter performing zero-shot inference. Given the image of an electrical circuit diagram, identify all symbols of class "diode.light_emitting". For each symbol from that class, output one <points> tag and nothing else, in the exact format: <points x1="…" y1="…" x2="…" y2="…" alt="diode.light_emitting">diode.light_emitting</points> Use the coordinates of the bounding polygon of each symbol. Do not include any additional text or tags.Example: <points x1="20.8" y1="42.4" x2="21.0" y2="53.6" alt="diode.light_emitting">diode.light_emitting</points>
===
Model_Response:  <points x1="30.5" y1="42.4" x2="30.5" y2="53.6" x3="38.5" y3="42.4" x4="38.7" y4="53.6" x5="62.0" y5="18.7" x6="62.0" y6="36.5" x7="69.5" y7="18.7" x8="69.5" y8="36.5" x9="76.8" y9="18.7" x10="76.8" y10="36.5" alt="diode.light_emitting">diode.light_emitting</points>
---
